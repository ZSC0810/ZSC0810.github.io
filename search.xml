<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2F2019%2F08%2F12%2F%E8%AE%A4%E8%AF%86%20sql%20%E5%B9%B6%E5%AD%A6%E4%B9%A0%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[title: sql学习date: 2019-08-12 18:34:01tags: 成长计划 SQL学习Part 11.关系型?非关系型一、关系型数据库​ 关系型数据库，是指采用了关系模型来组织数据的数据库。 关系型数据库，是指采用了关系模型来组织数据的数据库。 关系模型是在1970年由IBM的研究员E.F.Codd博士首先提出的，在之后的几十年中，关系模型的概念得到了充分的发展并逐渐成为主流数据库结构的主流模型。 简单来说，关系模型指的就是二维表格模型，而一个关系型数据库就是由二维表及其之间的联系所组成的一个数据组织。 关系模型中常用的概念： ==关系：可以理解为一张二维表，每个关系都具有一个关系名，就是通常说的表名== 元组：可以理解为二维表中的一行，在数据库中经常被称为==记录== 属性：可以理解为二维表中的一列，在数据库中经常被称为==字段== 域：属性的取值范围，也就是数据库中某一列的取值限制 关键字：一组可以唯一标识元组的属性，数据库中常称为主键，由一个或多个列组成 关系模式：指对关系的描述。其格式为：关系名(属性1，属性2， … … ，属性N)，在数据库中成为表结构 关系型数据库的优点： 容易理解：二维表结构是非常贴近逻辑世界的一个概念，关系模型相对网状、层次等其他模型来说更容易理解 使用方便：通用的SQL语言使得操作关系型数据库非常方便 易于维护：丰富的完整性(实体完整性、参照完整性和用户定义的完整性)大大减低了数据冗余和数据不一致的概率 关系型数据库瓶颈 1).高并发读写需求 网站的用户并发性非常高，往往达到每秒上万次读写请求，对于传统关系型数据库来说，硬盘I/O是一个很大的瓶颈 2).海量数据的高效率读写 网站每天产生的数据量是巨大的，对于关系型数据库来说，在一张包含海量数据的表中查询，效率是非常低的 3).高扩展性和可用性 在基于web的结构当中，数据库是最难进行横向扩展的，当一个应用系统的用户量和访问量与日俱增的时候，数据库却没有办法像web server和app server那样简单的通过添加更多的硬件和服务节点来扩展性能和负载能力。对于很多需要提供24小时不间断服务的网站来说，==对数据库系统进行升级和扩展是非常痛苦的事情，往往需要停机维护和数据迁移。== 对网站来说，关系型数据库的很多特性不再需要了： 事务一致性: 关系型数据库在对事物一致性的维护中有很大的开销，而现在很多web2.0系统对事物的读写一致性都不高 读写实时性: 对关系数据库来说，插入一条数据之后立刻查询，是肯定可以读出这条数据的，但是对于很多web应用来说，并不要求这么高的实时性，比如发一条消息之后，过几秒乃至十几秒之后才看到这条动态是完全可以接受的 复杂SQL，特别是多表关联查询: 任何大数据量的web系统，都非常忌讳多个大表的关联查询，以及复杂的数据分析类型的复杂SQL报表查询，特别是SNS类型的网站（SNS，专指社交网络服务，包括了社交软件和社交网站。），从需求以及产品阶级角度，就避免了这种情况的产生。往往更多的只是单表的主键查询，以及单表的简单条件分页查询，SQL的功能极大的弱化了 ​ 在关系型数据库中，导致性能欠佳的最主要原因是多表的关联查询，以及复杂的数据分析类型的复杂SQL报表查询。为了保证数据库的ACID特性，我们必须尽量按照其要求的范式进行设计，关系型数据库中的表都是存储一个格式化的数据结构。每个元组字段的组成都是一样，即使不是每个元组都需要所有的字段，但数据库会为每个元组分配所有的字段，这样的结构可以便于标语表之间进行链接等操作，但从另一个角度来说它也是关系型数据库性能瓶颈的一个因素。 二、NoSQL NoSQL一词首先是Carlo Strozzi在1998年提出来的，指的是他开发的一个没有SQL功能，轻量级的，开源的关系型数据库。这个定义跟我们现在对NoSQL的定义有很大的区别，它确确实实字如其名，指的就是“没有SQL”的数据库。但是NoSQL的发展慢慢偏离了初衷，我们要的不是“no sql”，而是“no relational”，也就是我们现在常说的非关系型数据库了。 2009年初，Johan Oskarsson举办了一场关于开源分布式数据库的讨论，Eric Evans在这次讨论中再次提出了NoSQL一词，用于指代那些非关系型的，分布式的，且一般不保证遵循ACID原则的数据存储系统。Eric Evans使用NoSQL这个词，并不是因为字面上的“没有SQL”的意思，他只是觉得很多经典的关系型数据库名字都叫“**SQL”,所以为了表示跟这些关系型数据库在定位上的截然不同，就是用了“NoSQL“一词。注：数据库事务必须具备ACID特性，ACID是Atomic原子性，Consistency一致性，Isolation隔离性，Durability持久性。 非关系型数据库提出另一种理念，例如，以键值对存储，且结构不固定，每一个元组可以有不一样的字段，每个元组可以根据需要增加一些自己的键值对，这样就不会局限于固定的结构，可以减少一些时间和空间的开销。使用这种方式，用户可以根据需要去添加自己需要的字段，这样，为了获取用户的不同信息，不需要像关系型数据库中，要对多表进行关联查询。仅需要根据id取出相应的value就可以完成查询。但非关系型数据库由于很少的约束，他也不能够提供像SQL所提供的where这种对于字段属性值情况的查询。并且难以体现设计的完整性。他只适合存储一些较为简单的数据，对于需要进行较复杂查询的数据，SQL数据库显的更为合适。 2-1.非关系型数据库分类 由于非关系型数据库本身天然的多样性，以及出现的时间较短，因此，不想关系型数据库，有几种数据库能够一统江山，非关系型数据库非常多，并且大部分都是开源的。 这些数据库中，其实实现大部分都比较简单，除了一些共性外，很大一部分都是针对某些特定的应用需求出现的，因此，对于该类应用，具有极高的性能。依据结构化方法以及应用场合的不同，主要分为以下几类： 1).面向高性能并发读写的==key-value数据库==：key-value数据库的主要特点即使具有极高的并发读写性能，==Redis,Tokyo Cabinet,Flare==就是这类的代表 2).面向海量数据访问的面向==文档数据库==：这类数据库的特点是，可以在海量的数据中快速的查询数据，典型代表为==MongoDB以及CouchDB== 3).面向可扩展性的分布式数据库：这类数据库想解决的问题就是传统数据库存在可扩展性上的缺陷，这类数据库可以适应数据量的增加以及数据结构的变化 临时性键值存储（memcached、Redis）、永久性键值存储（ROMA、Redis）、面向文档的数据库（MongoDB、CouchDB）、面向列的数据库（Cassandra、HBase） 三. 关系型数据库 V.S. 非关系型数据库​ 关系型数据库的最大特点就是事务的一致性：传统的关系型数据库读写操作都是事务的，具有ACID的特点，这个特性使得关系型数据库可以用于几乎所有对一致性有要求的系统中，如典型的银行系统。 ​ 但是，在网页应用中，尤其是SNS应用中，一致性却不是显得那么重要，用户A看到的内容和用户B看到同一用户C内容更新不一致是可以容忍的，或者说，两个人看到同一好友的数据更新的时间差那么几秒是可以容忍的，因此，关系型数据库的最大特点在这里已经无用武之地，起码不是那么重要了。 ​ 相反地，关系型数据库为了维护一致性所付出的巨大代价就是其读写性能比较差，而像微博、facebook这类SNS的应用，对并发读写能力要求极高，关系型数据库已经无法应付(在读方面，传统上为了克服关系型数据库缺陷，提高性能，都是增加一级memcache来静态化网页，而在SNS中，变化太快，memchache已经无能为力了)，因此，必须用新的一种数据结构存储来代替关系数据库。 ​ 关系数据库的另一个特点就是其具有固定的表结构，因此，其扩展性极差，而在SNS中，系统的升级，功能的增加，往往意味着数据结构巨大变动，这一点关系型数据库也难以应付，需要新的结构化数据存储。 ​ 于是，非关系型数据库应运而生，由于不可能用一种数据结构化存储应付所有的新的需求，因此，非关系型数据库严格上不是一种数据库，应该是一种数据结构化存储方法的集合。 ​ 必须强调的是，==数据的持久存储，尤其是海量数据的持久存储，还是需要一种关系数据库==这员老将。 MYSQL学习2.mysql数据库学习​ MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle旗下产品。MySQL所使用的 SQL 语言是用于访问数据库的最常用标准化语言。MySQL 软件采用了双授权政策，分为社区版和商业版，由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发都选择 MySQL 作为网站数据库。 ​ Linux作为操作系统，Apache或Nginx作为 Web 服务器，MySQL 作为数据库，PHP/Perl/Python作为服务器端脚本，因此使用这种方式不用花一分钱（除开人工成本）就可以建立起一个稳定、免费的网站系统，被业界称为“LAMP“或“LNMP”组合。 ​ MySQL是一种关系数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。 MySQL系统特性1 使用 C和 C++编写，并使用了多种编译器编译器进行测试，保证了源代码的可移植性。 2 支持AIX、FreeBSD、HP-UX、Linux、Mac OS、NovellNetware、OpenBSD、OS/2 Wrap、 Solaris、Windows等多种操作系统。 3 为多种编程语言提供了 API。这些编程语言包括 C、C++、Python、Java、Perl、PHP、Eiffel、Ruby,.NET和 Tcl 等。 4 支持多线程，充分利用 CPU 资源。 5 优化的 SQL查询算法，有效地提高查询速度。 6 既能够作为一个单独的应用程序应用在客户端服务器网络环境中，也能够作为一个库而嵌入到其他的软件中。 7 提供多语言支持，常见的编码如中文的 GB 2312、BIG5，日文的 Shift_JIS等都可以用作数据表名和数据列名。 8 提供 TCP/IP、ODBC 和 JDBC等多种数据库连接途径。 9 提供用于管理、检查、优化数据库操作的管理工具。 10 支持大型的数据库。可以处理拥有上千万条记录的大型数据库。 11 支持多种存储引擎。 12 MySQL 是开源的，所以你不需要支付额外的费用。 13 MySQL 使用标准的 SQL数据语言形式。 MySQL数据类型 含义date 3字节，日期，格式：2014-09-18time 3字节，时间，格式：08:42:30datetime 8字节，日期时间，格式：2014-09-18 08:42:30timestamp 4字节，自动存储记录修改的时间year 1字节，年份MySQL数据类型 含义(有符号)tinyint 1字节，范围（-128127）smallint 2字节，范围（-3276832767）mediumint 3字节，范围（-83886088388607）int 4字节，范围（-21474836482147483647）bigint 8字节，范围（+-9.22*10的18次方）14 MySQL 对 PHP 有很好的支持，PHP是比较流行的 Web 开发语言。 15 MySQL是可以定制的，采用了 GPL协议，你可以修改源码来开发自己的 MySQL 系统。 16 在线 DDL/更改功能，数据架构支持动态应用程序和开发人员灵活性（5.6新增） 17 复制全局事务标识，可支持自我修复式集群（5.6新增） 18 复制无崩溃从机，可提高可用性（5.6新增） 19 复制多线程从机，可提高性能（5.6新增） 20 3倍更快的性能（5.7 [3] 新增） 21 新的优化器（5.7新增） 22 原生JSON支持（5.7新增） 23 多源复制（5.7新增） 24 GIS的空间扩展 （5.7新增） MySQL数据类型MySQL提供了一组可以赋给表中各个列的数据类型，每个类型都强制数据满足为该数据类型预先确定的一组规则，例如大小、类型及格式。MySQL中的数据类型大的方面来分，可以分为：日期和时间、数值，以及字符串 ① 日期和时间数据类型 ② 数值数据类型 ​ 上面定义的都是有符号的，当然了，也可以加上unsigned关键字，定义成无符号的类型，那么对应的取值范围就要翻翻了。​ 比如：tinyint unsigned的取值范围为0~255 . ③ 浮点型 单精度与双精度的区别：双精度比单精度表示的位数大 精确的位数多。 ④ 字符串类型 常见字段类型事项1 char（n）和varchar（n）中括号中n代表字符的个数，并不代表字节个数，所以当使用了中文的时候(UTF8)意味着可以插入m个中文，但是实际会占用m*3个字节。 2 同时char和varchar最大的区别就在于char不管实际value长度多少，都会占用n个字符的空间，而varchar只会占用实际字符应该占用的空间+1{varchar在结尾会有结束符})，并且实际空间+1&lt;=n。 3 超过char和varchar的n设置后，字符串会被截断。 4 char的上限为255字节，varchar的上限65535字节，text的上限为65535。 5 char在存储的时候会截断尾部的空格，varchar和text不会。 6 varchar会使用1-3个字节来存储长度，text不会 MySQL常用操作使用mysql二进制连接 ​ 可以使用mysql二进制方式进入到mysql命令提示符下来连接msyql mysql -uroot -p 退出mysql 使用 PHP 脚本连接 MySQL PHP 提供了 mysqli_connect() 函数来连接数据库。 该函数有 6 个参数，在成功链接到 MySQL 后返回连接标识，失败返回 FALSE 。 语法 1mysqli_connect(host,username,password,dbname,port,socket); 语法 1bool mysqli_close ( mysqli $link ) 本函数关闭指定的连接标识所关联的到 MySQL 服务器的非持久连接。如果没有指定 link_identifier，则关闭上一个打开的连接。 提示：通常不需要使用 mysqli_close()，因为已打开的非持久连接会在脚本执行完毕后自动关闭。 连接myql .创建数据库 ​ 使用create命令创建数据库，语法如下； ​ create database 数据库名； create database zsc_db; 使用 PHP脚本 创建数据库​ PHP 使用 mysqli_query 函数来创建或者删除 MySQL 数据库。 该函数有两个参数，在执行成功时返回 TRUE，否则返回 FALSE。 ​ 语法 1mysqli_query(connection,query,resultmode); PHP脚本 删除数据库 DROP​ drop 命令删除数据库，命令格式： ​ drop databases 数据库名； ​ ​ 使用PHP脚本删除数据库跟使用PHP脚本创建数据库类似，只需要把 $sql = ‘DROP DATABASERUNOOB’; 即可 创建数据表 CREATE创建mysql数据表需要以下信息 表名； 表字段； 定义每个表的字段； 以下为创建mysql数据表的sql通用语法: create table table_name(column_name column_type); create table zsc_table(id int not null auto_increment,name varchar(100) not null,age int(3) not null,date date not null,qq int(9),mail varchar(100),primary key(id)); 注意事项：1 必须指定主键，否则创建表会失败；primary key （id）用于定义列为主键，可以使用多列来定义主键，列间以逗号分隔；2 如果你不想字段为 NULL 可以设置字段的属性为 NOT NULL， 在操作数据库时如果输入该字段的数据为NULL ，就会报错；3 auto_increment 定义列为自增的属性，一般用于主键，数值会自动加1；4 使用命令desc table_name;可以查看指定表的属性 删除数据库 drop语法：drop table table_name; 插入数据 insert into​ mysql 表中使用insert into SQL语句来插入数据，语法如下； insert into table_name(field1,field2,…fieldN) values (value1,value2,…valueN); 示例： insert into zsc_table（ id,name,age,date,qq,mail） values (1,”jack”,10,now(),123456,”jack@qq.com“); 查询数据 SELECTMySQL 数据库使用SQL SELECT语句来查询数据，语法如下：select column_name,column_name from table_name [where Clause] [limit N] [offset m] ;① 查询语句中可以使用一个或多个表，表之间使用逗号（，）分隔，并使用where语句来设定查询条件；② select命令可以读取一条或者多条记录；③ 可以使用星号（*）来代替其他字段，select语句会返回表的所有字段数据；④ 可以使用where语句来包含任何条件；⑤ 可以使用limit属性来设定返回的记录数；⑥ 可以通过offset指定select语句开始查询的数据偏移量，默认情况下偏移量为0 ![](C:\Users\ThinkPad\AppData\Roaming\Typora\typora-user-images\1565504376692.png 更新数据 UPDATE如果我们需要修改或更新mysql中得数据，我们可以使用SQL UPDATE 命令来操作 语法：update table_name set field1=nuw-valule1,field2=new-value2 [where Clause] where 子句如需有条件地从表中选取数据，可将 WHERE 子句添加到 SELECT 语句中，语法如下:select field1,field2,…fieldN from table1,table2…[where condition1 [and [or]] condition2 ……]注意：① 查询语句中可以使用一个或者多个表，表之间使用逗号（，）分割，并使用where语句来设定查询条件；② 可以在where子句中指定任何条件；③ 可以使用and或者or指定 一个或多个文件；④ where子句也可以运用与SQL的delete或者update命令；⑤ where子句类似于程序语言中的if条件，根据myslq表中的字段值来读取指定的数据；⑥ 下表为操作符列表，可用于where子句中：下表中实例指定A为10，B为20 delete语句可以使用 SQL 的 DELETE FROM 命令来删除 MySQL 数据表中的记录，语法如下：DELETE FROM table_name [WHERE Clause]；注意：① 如果没有指定where子句，mysql表中的所有记录将被删除；② 可以在where子句中指定任何条件；③ 可以在单个表中一次性删除记录。 LIKE语句 我们知道在 MySQL 中使用 SQL SELECT 命令来读取数据， 同时我们可以在 SELECT 语句中使用 WHERE 子句来获取指定的记录。 WHERE 子句中可以使用等号 = 来设定获取数据的条件，如 “runoob_author = ‘RUNOOB.COM’”。 但是有时候我们需要获取 runoob_author 字段含有 “COM” 字符的所有记录，这时我们就需要在 WHERE 子句中使用 SQL LIKE 子句。 SQL LIKE 子句中使用百分号 %字符来表示任意字符，类似于UNIX或正则表达式中的星号 *。 如果没有使用百分号 %, LIKE 子句与等号 = 的效果是一样的。 语法： 123SELECT field1, field2,...fieldN FROM table_nameWHERE field1 LIKE condition1 [AND [OR]] filed2 = &apos;somevalue&apos; 你可以在 WHERE 子句中指定任何条件。 你可以在 WHERE 子句中使用LIKE子句。 你可以使用LIKE子句代替等号 =。 LIKE 通常与 % 一同使用，类似于一个元字符的搜索。 你可以使用 AND 或者 OR 指定一个或多个条件。 你可以在 DELETE 或 UPDATE 命令中使用 WHERE…LIKE 子句来指定条件。 例子： mysql&gt; use RUNOOB;Database changedmysql&gt; SELECT * from runoob_tbl WHERE runoob_author LIKE ‘%COM’; MYSQL UNION操作符MySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。 UNION 语句：用于将不同表中相同列中查询的数据展示出来；（不包括重复数据） UNION ALL 语句：用于将不同表中相同列中查询的数据展示出来；（包括重复数据） union 不包括重复数据 union all 包括重复数据 union 前后列数，属性需相同 !1565507705274](C:\Users\ThinkPad\AppData\Roaming\Typora\typora-user-images\1565507705274.png) ORDER BY 排序MySQL 拼音排序 如果字符集采用的是 gbk(汉字编码字符集)，直接在查询语句后边添加 ORDER BY： 函数系统函数介绍几个常用函数： version()——MySQL 版本 user()——数据库用户名 database()——数据库名 @@datadir——数据库路径 @@version_compile_os——操作系统版本 防注入防止SQL注入，我们需要注意以下几个要点： 1.永远不要信任用户的输入。对用户的输入进行校验，可以通过正则表达式，或限制长度；对单引号和 双”-“进行转换等。 2.永远不要使用动态拼装sql，可以使用参数化的sql或者直接使用存储过程进行数据查询存取。 3.永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。 4.不要把机密信息直接存放，加密或者hash掉密码和敏感的信息。 5.应用的异常信息应该给出尽可能少的提示，最好使用自定义的错误信息对原始错误信息进行包装 6.sql注入的检测方法一般采取辅助软件或网站平台来检测，软件一般采用sql注入检测工具jsky，网站平台就有亿思网站安全平台检测工具。MDCSOFT SCAN等。采用MDCSOFT-IPS可以有效的防御SQL注入，XSS攻击等。]]></content>
  </entry>
  <entry>
    <title><![CDATA[page]]></title>
    <url>%2F2019%2F08%2F12%2Fpage%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[myblog]]></title>
    <url>%2F2019%2F08%2F12%2Fmyblog%2F</url>
    <content type="text"></content>
  </entry>
</search>
